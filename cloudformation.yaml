AWSTemplateFormatVersion: 2010-09-09
Description: support-admin-console
Parameters:
  VpcId:
    Type: String
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: vpc-e6e00183
  Subnets:
    Type: CommaDelimitedList
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Default: subnet-cb91ae8d, subnet-a7b74ac2, subnet-179e8063
  Stack:
    Description: Applied directly as a tag
    Type: String
  Stage:
    Description: Applied directly as a tag
    Type: String
  App:
    Description: Applied directly as a tag
    Type: String
    Default: admin-console
  AMI:
    Description: AMI ID (may be replaced by RiffRaff for latest baked AMI)
    Type: String
    Default: ami-0eb88168
  CertificateARN:
    Description: SSL certificate ARN
    Type: String
  KingsPlaceIP:
    Description: Kings Place IP range
    Type: String
    Default: 77.91.248.0/21

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
      - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Stack
        Value: !Ref Stack
        PropagateAtLaunch: true
      - Key: App
        Value: !Ref App
        PropagateAtLaunch: true
      - Key: Stage
        Value: !Ref Stage
        PropagateAtLaunch: true
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ev
          aws --region ${AWS::Region} s3 cp s3://membership-dist/${Stack}/${Stage}/${App}/support-admin-console_1.0-SNAPSHOT_all.deb /tmp
          dpkg -i /tmp/support-admin-console_1.0-SNAPSHOT_all.deb
          /opt/cloudwatch-logs/configure-logs application ${Stack} ${Stage} ${App} /var/log/support-admin-console/application.log
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ConfigLoad
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ssm:GetParametersByPath
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${App}/${Stage}
      - PolicyName: SettingsBucket
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: s3:*
            Resource: !Sub arn:aws:s3:::support-admin-console/${Stage}/*
      - PolicyName: DescribeAutoScaling
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeAutoScalingGroups
            Resource: "*"
      - PolicyName: DescribeTags
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ec2:DescribeTags
            Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref AppRole

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stack}-${Stage}-${App}
      Subnets: !Ref Subnets
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Tags:
      - Key: Stack
        Value: !Ref Stack
      - Key: App
        Value: !Ref App
      - Key: Stage
        Value: !Ref Stage

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: ElasticLoadBalancer
      Certificates:
      - CertificateArn: !Ref CertificateARN
      Port: 443
      Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Stack}-${Stage}-${App}
      Port: 9000
      Protocol: HTTP
      VpcId:
        Ref: VpcId
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckPort: 9000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
    DependsOn:
    - ElasticLoadBalancer

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit incoming HTTPS access on port 443, egress to port 9000
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: KingsPlaceIP
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up SSH access and enable HTTP access on the configured port
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: KingsPlaceIP
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp: KingsPlaceIP
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
