# ----- System ----- #
GET /healthcheck                                    controllers.Application.healthcheck

# ----- Pages ----- #
GET /                                               controllers.Application.index
GET /switches                                       controllers.Application.index
GET /amounts                                        controllers.Application.index

GET /header-tests                                   controllers.Application.index
GET /header-tests/:name                             controllers.Application.indexWithName(name: String)

GET /epic-tests                                     controllers.Application.index
GET /epic-tests/:name                               controllers.Application.indexWithName(name: String)

GET /support-landing-page-tests                     controllers.Application.index
GET /support-landing-page-tests/:name               controllers.Application.indexWithName(name: String)

GET /liveblog-epic-tests                            controllers.Application.index
GET /liveblog-epic-tests/:name                      controllers.Application.indexWithName(name: String)

GET /apple-news-epic-tests                          controllers.Application.index
GET /apple-news-epic-tests/:name                    controllers.Application.indexWithName(name: String)

GET /amp-epic-tests                                 controllers.Application.index
GET /amp-epic-tests/:name                           controllers.Application.indexWithName(name: String)

GET /banner-tests                                   controllers.Application.index
GET /banner-tests/:name                             controllers.Application.indexWithName(name: String)

GET /banner-tests2                                  controllers.Application.index
GET /banner-tests2/:name                            controllers.Application.indexWithName(name: String)

GET /banner-deploy                                  controllers.Application.index
GET /channel-switches                               controllers.Application.index

GET /gutter-liveblog-tests                                  controllers.Application.index
GET /gutter-liveblog-tests/:name                            controllers.Application.indexWithName(name: String)

GET /campaigns                                      controllers.Application.index
GET /campaigns/:name                                controllers.Application.indexWithName(name: String)

GET /qr-code                                        controllers.Application.index

GET /lynx                                           controllers.Application.index

GET /apps-metering-switches                         controllers.Application.index

GET /default-promos                                 controllers.Application.index

GET /super-mode                                     controllers.Application.index

GET /banner-designs                                 controllers.Application.index
GET /banner-designs/:name                           controllers.Application.indexWithName(name: String)

GET /audit-tests                                    controllers.Application.index
GET /audit-tests/:channel/:name                     controllers.Application.indexWithNameAndChannel(name: String, channel: String)
# ----- Authentication ----- #
GET  /login                                         controllers.Login.login
GET  /loginAction                                   controllers.Login.loginAction
GET  /oauth2callback                                controllers.Login.oauth2Callback
GET  /logout                                        controllers.Login.logout

# ----- support-frontend switches ----- #
GET   /support-frontend/switches                    controllers.SwitchesController.get
POST  /support-frontend/switches/update             controllers.SwitchesController.set

# ----- support-frontend amounts ----- #
GET   /support-frontend/amounts                     controllers.AmountsController.get
POST  /support-frontend/amounts/update              controllers.AmountsController.set

# ----- Epic tests ----- #
GET   /frontend/epic-tests                          controllers.epic.EpicTestsController.get
# epic list endpoints
POST  /frontend/epic-tests/list/lock                  controllers.epic.EpicTestsController.lockList
POST  /frontend/epic-tests/list/unlock                controllers.epic.EpicTestsController.unlockList
POST  /frontend/epic-tests/list/takecontrol           controllers.epic.EpicTestsController.takeControlOfList
POST  /frontend/epic-tests/list/reorder               controllers.epic.EpicTestsController.reorderList
# epic test endpoints
GET   /frontend/epic-tests/test/:testName             controllers.epic.EpicTestsController.getTest(testName: String)
POST  /frontend/epic-tests/test/update                controllers.epic.EpicTestsController.updateTest
POST  /frontend/epic-tests/test/create                controllers.epic.EpicTestsController.createTest
POST  /frontend/epic-tests/test/lock/:testName        controllers.epic.EpicTestsController.lockTest(testName: String)
POST  /frontend/epic-tests/test/unlock/:testName      controllers.epic.EpicTestsController.unlockTest(testName: String)
POST  /frontend/epic-tests/test/takecontrol/:testName controllers.epic.EpicTestsController.forceLockTest(testName: String)
POST  /frontend/epic-tests/test/status/:rawStatus     controllers.epic.EpicTestsController.setStatus(rawStatus: String)


# ----- Header tests ----- #
GET   /frontend/header-tests                          controllers.HeaderTestsController.get
# header list endpoints
POST  /frontend/header-tests/list/lock                  controllers.HeaderTestsController.lockList
POST  /frontend/header-tests/list/unlock                controllers.HeaderTestsController.unlockList
POST  /frontend/header-tests/list/takecontrol           controllers.HeaderTestsController.takeControlOfList
POST  /frontend/header-tests/list/reorder               controllers.HeaderTestsController.reorderList
# header test endpoints
GET   /frontend/header-tests/test/:testName             controllers.HeaderTestsController.getTest(testName: String)
POST  /frontend/header-tests/test/update                controllers.HeaderTestsController.updateTest
POST  /frontend/header-tests/test/create                controllers.HeaderTestsController.createTest
POST  /frontend/header-tests/test/lock/:testName        controllers.HeaderTestsController.lockTest(testName: String)
POST  /frontend/header-tests/test/unlock/:testName      controllers.HeaderTestsController.unlockTest(testName: String)
POST  /frontend/header-tests/test/takecontrol/:testName controllers.HeaderTestsController.forceLockTest(testName: String)
POST  /frontend/header-tests/test/status/:rawStatus     controllers.HeaderTestsController.setStatus(rawStatus: String)


# ----- Liveblog epic tests ----- #
GET   /frontend/liveblog-epic-tests                          controllers.epic.LiveblogEpicTestsController.get
# liveblog epic list endpoints
POST  /frontend/liveblog-epic-tests/list/lock                  controllers.epic.LiveblogEpicTestsController.lockList
POST  /frontend/liveblog-epic-tests/list/unlock                controllers.epic.LiveblogEpicTestsController.unlockList
POST  /frontend/liveblog-epic-tests/list/takecontrol           controllers.epic.LiveblogEpicTestsController.takeControlOfList
POST  /frontend/liveblog-epic-tests/list/reorder               controllers.epic.LiveblogEpicTestsController.reorderList
# liveblog epic test endpoints
GET   /frontend/liveblog-epic-tests/test/:testName             controllers.epic.LiveblogEpicTestsController.getTest(testName: String)
POST  /frontend/liveblog-epic-tests/test/update                controllers.epic.LiveblogEpicTestsController.updateTest
POST  /frontend/liveblog-epic-tests/test/create                controllers.epic.LiveblogEpicTestsController.createTest
POST  /frontend/liveblog-epic-tests/test/lock/:testName        controllers.epic.LiveblogEpicTestsController.lockTest(testName: String)
POST  /frontend/liveblog-epic-tests/test/unlock/:testName      controllers.epic.LiveblogEpicTestsController.unlockTest(testName: String)
POST  /frontend/liveblog-epic-tests/test/takecontrol/:testName controllers.epic.LiveblogEpicTestsController.forceLockTest(testName: String)
POST  /frontend/liveblog-epic-tests/test/status/:rawStatus     controllers.epic.LiveblogEpicTestsController.setStatus(rawStatus: String)


# ----- Apple News epic 'tests' ----- #
GET   /frontend/apple-news-epic-tests                          controllers.epic.AppleNewsEpicTestsController.get
# Apple News epic list endpoints
POST  /frontend/apple-news-epic-tests/list/lock                  controllers.epic.AppleNewsEpicTestsController.lockList
POST  /frontend/apple-news-epic-tests/list/unlock                controllers.epic.AppleNewsEpicTestsController.unlockList
POST  /frontend/apple-news-epic-tests/list/takecontrol           controllers.epic.AppleNewsEpicTestsController.takeControlOfList
POST  /frontend/apple-news-epic-tests/list/reorder               controllers.epic.AppleNewsEpicTestsController.reorderList
# Apple News epic test endpoints
GET   /frontend/apple-news-epic-tests/test/:testName             controllers.epic.AppleNewsEpicTestsController.getTest(testName: String)
POST  /frontend/apple-news-epic-tests/test/update                controllers.epic.AppleNewsEpicTestsController.updateTest
POST  /frontend/apple-news-epic-tests/test/create                controllers.epic.AppleNewsEpicTestsController.createTest
POST  /frontend/apple-news-epic-tests/test/lock/:testName        controllers.epic.AppleNewsEpicTestsController.lockTest(testName: String)
POST  /frontend/apple-news-epic-tests/test/unlock/:testName      controllers.epic.AppleNewsEpicTestsController.unlockTest(testName: String)
POST  /frontend/apple-news-epic-tests/test/takecontrol/:testName controllers.epic.AppleNewsEpicTestsController.forceLockTest(testName: String)
POST  /frontend/apple-news-epic-tests/test/status/:rawStatus     controllers.epic.AppleNewsEpicTestsController.setStatus(rawStatus: String)


# ----- AMP epic 'tests' ----- #
GET   /frontend/amp-epic-tests                          controllers.epic.AMPEpicTestsController.get
# AMP epic list endpoints
POST  /frontend/amp-epic-tests/list/lock                  controllers.epic.AMPEpicTestsController.lockList
POST  /frontend/amp-epic-tests/list/unlock                controllers.epic.AMPEpicTestsController.unlockList
POST  /frontend/amp-epic-tests/list/takecontrol           controllers.epic.AMPEpicTestsController.takeControlOfList
POST  /frontend/amp-epic-tests/list/reorder               controllers.epic.AMPEpicTestsController.reorderList
# AMP epic test endpoints
GET   /frontend/amp-epic-tests/test/:testName             controllers.epic.AMPEpicTestsController.getTest(testName: String)
POST  /frontend/amp-epic-tests/test/update                controllers.epic.AMPEpicTestsController.updateTest
POST  /frontend/amp-epic-tests/test/create                controllers.epic.AMPEpicTestsController.createTest
POST  /frontend/amp-epic-tests/test/lock/:testName        controllers.epic.AMPEpicTestsController.lockTest(testName: String)
POST  /frontend/amp-epic-tests/test/unlock/:testName      controllers.epic.AMPEpicTestsController.unlockTest(testName: String)
POST  /frontend/amp-epic-tests/test/takecontrol/:testName controllers.epic.AMPEpicTestsController.forceLockTest(testName: String)
POST  /frontend/amp-epic-tests/test/status/:rawStatus     controllers.epic.AMPEpicTestsController.setStatus(rawStatus: String)


# ----- Banner channel 1 tests ----- #
GET   /frontend/banner-tests                            controllers.banner.BannerTestsController.get
# banner list endpoints
POST  /frontend/banner-tests/list/lock                  controllers.banner.BannerTestsController.lockList
POST  /frontend/banner-tests/list/unlock                controllers.banner.BannerTestsController.unlockList
POST  /frontend/banner-tests/list/takecontrol           controllers.banner.BannerTestsController.takeControlOfList
POST  /frontend/banner-tests/list/reorder               controllers.banner.BannerTestsController.reorderList
# banner test endpoints
GET   /frontend/banner-tests/test/:testName             controllers.banner.BannerTestsController.getTest(testName: String)
POST  /frontend/banner-tests/test/update                controllers.banner.BannerTestsController.updateTest
POST  /frontend/banner-tests/test/create                controllers.banner.BannerTestsController.createTest
POST  /frontend/banner-tests/test/lock/:testName        controllers.banner.BannerTestsController.lockTest(testName: String)
POST  /frontend/banner-tests/test/unlock/:testName      controllers.banner.BannerTestsController.unlockTest(testName: String)
POST  /frontend/banner-tests/test/takecontrol/:testName controllers.banner.BannerTestsController.forceLockTest(testName: String)
POST  /frontend/banner-tests/test/status/:rawStatus     controllers.banner.BannerTestsController.setStatus(rawStatus: String)


# ----- Banner channel 2 tests ----- #
GET   /frontend/banner-tests2                          controllers.banner.BannerTestsController2.get
# banner list endpoints
POST  /frontend/banner-tests2/list/lock                  controllers.banner.BannerTestsController2.lockList
POST  /frontend/banner-tests2/list/unlock                controllers.banner.BannerTestsController2.unlockList
POST  /frontend/banner-tests2/list/takecontrol           controllers.banner.BannerTestsController2.takeControlOfList
POST  /frontend/banner-tests2/list/reorder               controllers.banner.BannerTestsController2.reorderList
# banner test endpoints
GET   /frontend/banner-tests2/test/:testName             controllers.banner.BannerTestsController2.getTest(testName: String)
POST  /frontend/banner-tests2/test/update                controllers.banner.BannerTestsController2.updateTest
POST  /frontend/banner-tests2/test/create                controllers.banner.BannerTestsController2.createTest
POST  /frontend/banner-tests2/test/lock/:testName        controllers.banner.BannerTestsController2.lockTest(testName: String)
POST  /frontend/banner-tests2/test/unlock/:testName      controllers.banner.BannerTestsController2.unlockTest(testName: String)
POST  /frontend/banner-tests2/test/takecontrol/:testName controllers.banner.BannerTestsController2.forceLockTest(testName: String)
POST  /frontend/banner-tests2/test/status/:rawStatus     controllers.banner.BannerTestsController2.setStatus(rawStatus: String)


# ----- banner deploys ----- #
GET   /frontend/banner-deploy                          controllers.banner.BannerDeployController.get
POST  /frontend/banner-deploy/update                   controllers.banner.BannerDeployController.set

# ----- banner deploys ----- #
GET   /frontend/banner-deploy2                         controllers.banner.BannerDeployController2.get
POST  /frontend/banner-deploy2/update                  controllers.banner.BannerDeployController2.set

# ----- Gutter channel tests ----- #
GET   /frontend/gutter-liveblog-tests                            controllers.gutter.GutterLiveblogTestsController.get
# gutter list endpoints
POST  /frontend/gutter-liveblog-tests/list/lock                  controllers.gutter.GutterLiveblogTestsController.lockList
POST  /frontend/gutter-liveblog-tests/list/unlock                controllers.gutter.GutterLiveblogTestsController.unlockList
POST  /frontend/gutter-liveblog-tests/list/takecontrol           controllers.gutter.GutterLiveblogTestsController.takeControlOfList
POST  /frontend/gutter-liveblog-tests/list/reorder               controllers.gutter.GutterLiveblogTestsController.reorderList
# gutter test endpoints
GET   /frontend/gutter-liveblog-tests/test/:testName             controllers.gutter.GutterLiveblogTestsController.getTest(testName: String)
POST  /frontend/gutter-liveblog-tests/test/update                controllers.gutter.GutterLiveblogTestsController.updateTest
POST  /frontend/gutter-liveblog-tests/test/create                controllers.gutter.GutterLiveblogTestsController.createTest
POST  /frontend/gutter-liveblog-tests/test/lock/:testName        controllers.gutter.GutterLiveblogTestsController.lockTest(testName: String)
POST  /frontend/gutter-liveblog-tests/test/unlock/:testName      controllers.gutter.GutterLiveblogTestsController.unlockTest(testName: String)
POST  /frontend/gutter-liveblog-tests/test/takecontrol/:testName controllers.gutter.GutterLiveblogTestsController.forceLockTest(testName: String)
POST  /frontend/gutter-liveblog-tests/test/status/:rawStatus     controllers.gutter.GutterLiveblogTestsController.setStatus(rawStatus: String)

# ----- channel switches ----- #
GET   /frontend/channel-switches                       controllers.ChannelSwitchesController.get
POST  /frontend/channel-switches/update                controllers.ChannelSwitchesController.set

# ----- campaigns ----- #
GET   /frontend/campaigns                              controllers.CampaignsController.get()
POST  /frontend/campaigns/create                       controllers.CampaignsController.createCampaign
POST  /frontend/campaigns/update                       controllers.CampaignsController.updateCampaign
GET   /frontend/campaign/:campaignName/tests           controllers.CampaignsController.getTests(campaignName: String)

# ----- banner designs ----- #
GET   /frontend/banner-designs                         controllers.banner.BannerDesignsController.getAll
GET   /frontend/banner-designs/:designName             controllers.banner.BannerDesignsController.get(designName: String)
GET   /frontend/banner-designs/usage/:designName       controllers.banner.BannerDesignsController.usage(designName: String)
POST  /frontend/banner-designs/update                  controllers.banner.BannerDesignsController.update
POST  /frontend/banner-designs/create                  controllers.banner.BannerDesignsController.create
POST  /frontend/banner-designs/lock/:designName        controllers.banner.BannerDesignsController.lock(designName: String)
POST  /frontend/banner-designs/unlock/:designName      controllers.banner.BannerDesignsController.unlock(designName: String)
POST  /frontend/banner-designs/takecontrol/:designName controllers.banner.BannerDesignsController.forceLock(designName: String)
POST  /frontend/banner-designs/status/:designName/:rawStatus controllers.banner.BannerDesignsController.setStatus(designName: String, rawStatus: String)
POST  /frontend/banner-designs/archive/:designName     controllers.banner.BannerDesignsController.archive(designName: String)

# ----- capi ----- #
GET   /capi/tags                                       controllers.CapiController.getTags()
GET   /capi/sections                                   controllers.CapiController.getSections()
GET   /capi/content/*path                              controllers.CapiController.getContent(path: String)

# ----- apps metering switches ----- #
GET   /apps/apps-metering-switches                     controllers.AppsMeteringSwitchesController.get
POST  /apps/apps-metering-switches/update              controllers.AppsMeteringSwitchesController.set

# ----- default promos ---------- #
GET   /support-frontend/default-promos                     controllers.DefaultPromosController.get
POST  /support-frontend/default-promos/update              controllers.DefaultPromosController.set

# ----- super mode ----- #
GET   /frontend/super-mode                             controllers.SuperModeController.getSuperModeRows()

# ----- analytics ----- #
GET   /frontend/bandit/:channel/:testName              controllers.BanditDataController.getDataForTest(channel: String, testName: String)
GET   /frontend/bandit/:channel/:testName/ltv3         controllers.BanditDataController.getLTVDataForTest(testName: String,channel: String)

# ----- audit ----- #
GET   /frontend/audit/:channel/:testName              controllers.ChannelTestsAuditController.getAuditsForChannelTest(channel: String, testName: String)

# Map static resources from the /public folder to the /assets URL path
GET  /assets/*file                                  controllers.Assets.at(path="/public", file)

# ----- Support Landing Page 'tests' ----- #
GET   /frontend/support-landing-page-tests                     controllers.SupportLandingPageController.get
# landing page list endpoints
POST  /frontend/support-landing-page-tests/list/lock                  controllers.SupportLandingPageController.lockList
POST  /frontend/support-landing-page-tests/list/unlock                controllers.SupportLandingPageController.unlockList
POST  /frontend/support-landing-page-tests/list/takecontrol           controllers.SupportLandingPageController.takeControlOfList
POST  /frontend/support-landing-page-tests/list/reorder               controllers.SupportLandingPageController.reorderList
# landing page test endpoints
GET   /frontend/support-landing-page-tests/test/:testName             controllers.SupportLandingPageController.getTest(testName: String)
POST  /frontend/support-landing-page-tests/test/update                controllers.SupportLandingPageController.updateTest
POST  /frontend/support-landing-page-tests/test/create                controllers.SupportLandingPageController.createTest
POST  /frontend/support-landing-page-tests/test/lock/:testName        controllers.SupportLandingPageController.lockTest(testName: String)
POST  /frontend/support-landing-page-tests/test/unlock/:testName      controllers.SupportLandingPageController.unlockTest(testName: String)
POST  /frontend/support-landing-page-tests/test/takecontrol/:testName controllers.SupportLandingPageController.forceLockTest(testName: String)
POST  /frontend/support-landing-page-tests/test/status/:rawStatus     controllers.SupportLandingPageController.setStatus(rawStatus: String)

# Promo Campaigns endpoints
GET /promos/campaigns/:campaignCode         controllers.promos.PromoCampaignsController.get(campaignCode: String)
GET /promos/campaigns/:product              controllers.promos.PromoCampaignsController.getAll(product: String)